"apilist"
{
	"interfaces"
	{
		"0"
		{
			"name"	"IClientStats_1046930"
			"methods"
			{
				"0"
				{
					"name"	"ReportEvent"
					"version"	"1"
					"httpmethod"	"POST"
					"parameters"
					{

					}
				}
			}
		}
		"1"
		{
			"name"	"IGCVersion_1046930"
			"methods"
			{
				"0"
				{
					"name"	"GetClientVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"2"
		{
			"name"	"IGCVersion_205790"
			"methods"
			{
				"0"
				{
					"name"	"GetClientVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"3"
		{
			"name"	"IGCVersion_440"
			"methods"
			{
				"0"
				{
					"name"	"GetClientVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"4"
		{
			"name"	"IGCVersion_570"
			"methods"
			{
				"0"
				{
					"name"	"GetClientVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"5"
		{
			"name"	"IGCVersion_583950"
			"methods"
			{
				"0"
				{
					"name"	"GetClientVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"6"
		{
			"name"	"IGCVersion_730"
			"methods"
			{
				"0"
				{
					"name"	"GetServerVersion"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"7"
		{
			"name"	"IPortal2Leaderboards_620"
			"methods"
			{
				"0"
				{
					"name"	"GetBucketizedData"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"leaderboardName"
							"type"	"string"
							"optional"	"0"
							"description"	"The leaderboard name to fetch data for."
						}
					}
				}
			}
		}
		"8"
		{
			"name"	"ISteamApps"
			"methods"
			{
				"0"
				{
					"name"	"GetAppList"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetAppList"
					"version"	"2"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"2"
				{
					"name"	"GetSDRConfig"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID of game"
						}
						"1"
						{
							"name"	"partner"
							"type"	"string"
							"optional"	"1"
							"description"	"Partner type"
						}
					}
				}
				"3"
				{
					"name"	"GetServersAtAddress"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"addr"
							"type"	"string"
							"optional"	"0"
							"description"	"IP or IP:queryport to list"
						}
					}
				}
				"4"
				{
					"name"	"UpToDateCheck"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID of game"
						}
						"1"
						{
							"name"	"version"
							"type"	"uint32"
							"optional"	"0"
							"description"	"The installed version of the game"
						}
					}
				}
			}
		}
		"9"
		{
			"name"	"ISteamBroadcast"
			"methods"
			{
				"0"
				{
					"name"	"ViewerHeartbeat"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Steam ID of the broadcaster"
						}
						"1"
						{
							"name"	"sessionid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Broadcast Session ID"
						}
						"2"
						{
							"name"	"token"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Viewer token"
						}
						"3"
						{
							"name"	"stream"
							"type"	"int32"
							"optional"	"1"
							"description"	"video stream representation watching"
						}
					}
				}
			}
		}
		"10"
		{
			"name"	"ISteamDirectory"
			"methods"
			{
				"0"
				{
					"name"	"GetCMList"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"cellid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Client's Steam cell ID"
						}
						"1"
						{
							"name"	"maxcount"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Max number of servers to return"
						}
					}
				}
				"1"
				{
					"name"	"GetCSList"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"cellid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Client's Steam cell ID"
						}
						"1"
						{
							"name"	"maxcount"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Max number of servers to return"
						}
					}
				}
				"2"
				{
					"name"	"GetSteamPipeDomains"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"11"
		{
			"name"	"ISteamNews"
			"methods"
			{
				"0"
				{
					"name"	"GetNewsForApp"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID to retrieve news for"
						}
						"1"
						{
							"name"	"maxlength"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit."
						}
						"2"
						{
							"name"	"enddate"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Retrieve posts earlier than this date (unix epoch timestamp)"
						}
						"3"
						{
							"name"	"count"
							"type"	"uint32"
							"optional"	"1"
							"description"	"# of posts to retrieve (default 20)"
						}
						"4"
						{
							"name"	"tags"
							"type"	"string"
							"optional"	"1"
							"description"	"Comma-separated list of tags to filter by (e.g. 'patchnodes')"
						}
					}
				}
				"1"
				{
					"name"	"GetNewsForApp"
					"version"	"2"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID to retrieve news for"
						}
						"1"
						{
							"name"	"maxlength"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit."
						}
						"2"
						{
							"name"	"enddate"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Retrieve posts earlier than this date (unix epoch timestamp)"
						}
						"3"
						{
							"name"	"count"
							"type"	"uint32"
							"optional"	"1"
							"description"	"# of posts to retrieve (default 20)"
						}
						"4"
						{
							"name"	"feeds"
							"type"	"string"
							"optional"	"1"
							"description"	"Comma-separated list of feed names to return news for"
						}
						"5"
						{
							"name"	"tags"
							"type"	"string"
							"optional"	"1"
							"description"	"Comma-separated list of tags to filter by (e.g. 'patchnodes')"
						}
					}
				}
			}
		}
		"12"
		{
			"name"	"ISteamRemoteStorage"
			"methods"
			{
				"0"
				{
					"name"	"GetCollectionDetails"
					"version"	"1"
					"httpmethod"	"POST"
					"parameters"
					{
						"0"
						{
							"name"	"collectioncount"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Number of collections being requested"
						}
						"1"
						{
							"name"	"publishedfileids[0]"
							"type"	"uint64"
							"optional"	"0"
							"description"	"collection ids to get the details for"
						}
					}
				}
				"1"
				{
					"name"	"GetPublishedFileDetails"
					"version"	"1"
					"httpmethod"	"POST"
					"parameters"
					{
						"0"
						{
							"name"	"itemcount"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Number of items being requested"
						}
						"1"
						{
							"name"	"publishedfileids[0]"
							"type"	"uint64"
							"optional"	"0"
							"description"	"published file id to look up"
						}
					}
				}
			}
		}
		"13"
		{
			"name"	"ISteamUserAuth"
			"methods"
			{
				"0"
				{
					"name"	"AuthenticateUser"
					"version"	"1"
					"httpmethod"	"POST"
					"parameters"
					{
						"0"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Should be the users steamid, unencrypted."
						}
						"1"
						{
							"name"	"sessionkey"
							"type"	"rawbinary"
							"optional"	"0"
							"description"	"Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key.  Randomness is important here for security."
						}
						"2"
						{
							"name"	"encrypted_loginkey"
							"type"	"rawbinary"
							"optional"	"0"
							"description"	"Should be the users hashed loginkey, AES encrypted with the sessionkey."
						}
					}
				}
			}
		}
		"14"
		{
			"name"	"ISteamUserOAuth"
			"methods"
			{
				"0"
				{
					"name"	"GetTokenDetails"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"access_token"
							"type"	"string"
							"optional"	"0"
							"description"	"OAuth2 token for which to return details"
						}
					}
				}
			}
		}
		"15"
		{
			"name"	"ISteamUserStats"
			"methods"
			{
				"0"
				{
					"name"	"GetGlobalAchievementPercentagesForApp"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"gameid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"GameID to retrieve the achievement percentages for"
						}
					}
				}
				"1"
				{
					"name"	"GetGlobalAchievementPercentagesForApp"
					"version"	"2"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"gameid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"GameID to retrieve the achievement percentages for"
						}
					}
				}
				"2"
				{
					"name"	"GetGlobalStatsForGame"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID that we're getting global stats for"
						}
						"1"
						{
							"name"	"count"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Number of stats get data for"
						}
						"2"
						{
							"name"	"name[0]"
							"type"	"string"
							"optional"	"0"
							"description"	"Names of stat to get data for"
						}
						"3"
						{
							"name"	"startdate"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Start date for daily totals (unix epoch timestamp)"
						}
						"4"
						{
							"name"	"enddate"
							"type"	"uint32"
							"optional"	"1"
							"description"	"End date for daily totals (unix epoch timestamp)"
						}
					}
				}
				"3"
				{
					"name"	"GetNumberOfCurrentPlayers"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID that we're getting user count for"
						}
					}
				}
			}
		}
		"16"
		{
			"name"	"ISteamWebAPIUtil"
			"methods"
			{
				"0"
				{
					"name"	"GetServerInfo"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
				"1"
				{
					"name"	"GetSupportedAPIList"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"key"
							"type"	"string"
							"optional"	"1"
							"description"	"access key"
						}
					}
				}
			}
		}
		"17"
		{
			"name"	"ISteamWebUserPresenceOAuth"
			"methods"
			{
				"0"
				{
					"name"	"PollStatus"
					"version"	"1"
					"httpmethod"	"POST"
					"parameters"
					{
						"0"
						{
							"name"	"steamid"
							"type"	"string"
							"optional"	"0"
							"description"	"Steam ID of the user"
						}
						"1"
						{
							"name"	"umqid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"UMQ Session ID"
						}
						"2"
						{
							"name"	"message"
							"type"	"uint32"
							"optional"	"0"
							"description"	"Message that was last known to the user"
						}
						"3"
						{
							"name"	"pollid"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Caller-specific poll id"
						}
						"4"
						{
							"name"	"sectimeout"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Long-poll timeout in seconds"
						}
						"5"
						{
							"name"	"secidletime"
							"type"	"uint32"
							"optional"	"1"
							"description"	"How many seconds is client considering itself idle, e.g. screen is off"
						}
						"6"
						{
							"name"	"use_accountids"
							"type"	"uint32"
							"optional"	"1"
							"description"	"Boolean, 0 (default): return steamid_from in output, 1: return accountid_from"
						}
					}
				}
			}
		}
		"18"
		{
			"name"	"ITFSystem_440"
			"methods"
			{
				"0"
				{
					"name"	"GetWorldStatus"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{

					}
				}
			}
		}
		"19"
		{
			"name"	"IBroadcastService"
			"methods"
			{
				"0"
				{
					"name"	"PostGameDataFrameRTMP"
					"version"	"1"
					"httpmethod"	"POST"
					"description"	"Add a game meta data frame to broadcast from a client. Uses RTMP token for validation"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"AppID of the game being broadcasted"
						}
						"1"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Broadcasters SteamID"
						}
						"2"
						{
							"name"	"rtmp_token"
							"type"	"string"
							"optional"	"0"
							"description"	"Valid RTMP token for the Broadcaster"
						}
						"3"
						{
							"name"	"frame_data"
							"type"	"string"
							"optional"	"0"
							"description"	"game data frame expressing current state of game (string, zipped, whatever)"
						}
					}
				}
			}
		}
		"20"
		{
			"name"	"IContentServerDirectoryService"
			"methods"
			{
				"0"
				{
					"name"	"GetServersForSteamPipe"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"cell_id"
							"type"	"uint32"
							"optional"	"0"
							"description"	"client Cell ID"
						}
						"1"
						{
							"name"	"max_servers"
							"type"	"uint32"
							"optional"	"1"
							"description"	"max servers in response list"
						}
						"2"
						{
							"name"	"ip_override"
							"type"	"string"
							"optional"	"1"
							"description"	"client IP address"
						}
						"3"
						{
							"name"	"launcher_type"
							"type"	"int32"
							"optional"	"1"
							"description"	"launcher type"
						}
					}
				}
				"1"
				{
					"name"	"GetDepotPatchInfo"
					"version"	"1"
					"httpmethod"	"GET"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
						}
						"1"
						{
							"name"	"depotid"
							"type"	"uint32"
							"optional"	"0"
						}
						"2"
						{
							"name"	"source_manifestid"
							"type"	"uint64"
							"optional"	"0"
						}
						"3"
						{
							"name"	"target_manifestid"
							"type"	"uint64"
							"optional"	"0"
						}
					}
				}
			}
		}
		"21"
		{
			"name"	"IPublishedFileService"
			"methods"
			{
				"0"
				{
					"name"	"GetUserVoteSummary"
					"version"	"1"
					"httpmethod"	"GET"
					"description"	"Get user vote summary"
					"parameters"
					{
						"0"
						{
							"name"	"publishedfileids"
							"type"	"uint64"
							"optional"	"0"
						}
					}
				}
			}
		}
		"22"
		{
			"name"	"IPlayerService"
			"methods"
			{
				"0"
				{
					"name"	"RecordOfflinePlaytime"
					"version"	"1"
					"httpmethod"	"POST"
					"description"	"Tracks playtime for a user when they are offline"
					"parameters"
					{
						"0"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
						}
						"1"
						{
							"name"	"ticket"
							"type"	"string"
							"optional"	"0"
						}
						"2"
						{
							"name"	"play_sessions"
							"type"	"{message}"
							"optional"	"0"
						}
					}
				}
			}
		}
		"23"
		{
			"name"	"IGameNotificationsService"
			"methods"
			{
				"0"
				{
					"name"	"UserCreateSession"
					"version"	"1"
					"httpmethod"	"POST"
					"description"	"Creates an async game session"
					"parameters"
					{
						"0"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"The appid to create the session for."
						}
						"1"
						{
							"name"	"context"
							"type"	"uint64"
							"optional"	"0"
							"description"	"Game-specified context value the game can used to associate the session with some object on their backend."
						}
						"2"
						{
							"name"	"title"
							"type"	"{message}"
							"optional"	"0"
							"description"	"The title of the session to be displayed within each user's list of sessions."
						}
						"3"
						{
							"name"	"users"
							"type"	"{message}"
							"optional"	"0"
							"description"	"The initial state of all users in the session."
						}
						"4"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."
						}
					}
				}
				"1"
				{
					"name"	"UserUpdateSession"
					"version"	"1"
					"httpmethod"	"POST"
					"description"	"Updates an async game session"
					"parameters"
					{
						"0"
						{
							"name"	"sessionid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"The sessionid to update."
						}
						"1"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"The appid of the session to update."
						}
						"2"
						{
							"name"	"title"
							"type"	"{message}"
							"optional"	"0"
							"description"	"(Optional) The new title of the session.  If not specified, the title will not be changed."
						}
						"3"
						{
							"name"	"users"
							"type"	"{message}"
							"optional"	"0"
							"description"	"(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it."
						}
						"4"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user."
						}
					}
				}
				"2"
				{
					"name"	"UserDeleteSession"
					"version"	"1"
					"httpmethod"	"POST"
					"description"	"Deletes an async game session"
					"parameters"
					{
						"0"
						{
							"name"	"sessionid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"The sessionid to delete."
						}
						"1"
						{
							"name"	"appid"
							"type"	"uint32"
							"optional"	"0"
							"description"	"The appid of the session to delete."
						}
						"2"
						{
							"name"	"steamid"
							"type"	"uint64"
							"optional"	"0"
							"description"	"(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session."
						}
					}
				}
			}
		}
	}
}